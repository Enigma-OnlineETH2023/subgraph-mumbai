// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class NewCollectionDeployed extends ethereum.Event {
  get params(): NewCollectionDeployed__Params {
    return new NewCollectionDeployed__Params(this);
  }
}

export class NewCollectionDeployed__Params {
  _event: NewCollectionDeployed;

  constructor(event: NewCollectionDeployed) {
    this._event = event;
  }

  get collectionAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  accessManager(): Address {
    let result = super.call("accessManager", "accessManager():(address)", []);

    return result[0].toAddress();
  }

  try_accessManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accessManager",
      "accessManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployCollection(
    _accessManager: Address,
    _name: string,
    _symbol: string
  ): Address {
    let result = super.call(
      "deployCollection",
      "deployCollection(address,string,string):(address)",
      [
        ethereum.Value.fromAddress(_accessManager),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol)
      ]
    );

    return result[0].toAddress();
  }

  try_deployCollection(
    _accessManager: Address,
    _name: string,
    _symbol: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployCollection",
      "deployCollection(address,string,string):(address)",
      [
        ethereum.Value.fromAddress(_accessManager),
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollectionAddress(_index: BigInt): Address {
    let result = super.call(
      "getCollectionAddress",
      "getCollectionAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );

    return result[0].toAddress();
  }

  try_getCollectionAddress(_index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCollectionAddress",
      "getCollectionAddress(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollectionsAddresses(): Array<Address> {
    let result = super.call(
      "getCollectionsAddresses",
      "getCollectionsAddresses():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getCollectionsAddresses(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getCollectionsAddresses",
      "getCollectionsAddresses():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getCollectionsNumber(): BigInt {
    let result = super.call(
      "getCollectionsNumber",
      "getCollectionsNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCollectionsNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollectionsNumber",
      "getCollectionsNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isCollectionAddress(_collection: Address): boolean {
    let result = super.call(
      "isCollectionAddress",
      "isCollectionAddress(address):(bool)",
      [ethereum.Value.fromAddress(_collection)]
    );

    return result[0].toBoolean();
  }

  try_isCollectionAddress(_collection: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isCollectionAddress",
      "isCollectionAddress(address):(bool)",
      [ethereum.Value.fromAddress(_collection)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  secretNFTContractImplementation(): Address {
    let result = super.call(
      "secretNFTContractImplementation",
      "secretNFTContractImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_secretNFTContractImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "secretNFTContractImplementation",
      "secretNFTContractImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _secretNFTContractImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _accessManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployCollectionCall extends ethereum.Call {
  get inputs(): DeployCollectionCall__Inputs {
    return new DeployCollectionCall__Inputs(this);
  }

  get outputs(): DeployCollectionCall__Outputs {
    return new DeployCollectionCall__Outputs(this);
  }
}

export class DeployCollectionCall__Inputs {
  _call: DeployCollectionCall;

  constructor(call: DeployCollectionCall) {
    this._call = call;
  }

  get _accessManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class DeployCollectionCall__Outputs {
  _call: DeployCollectionCall;

  constructor(call: DeployCollectionCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class SetSecretNFTContractImplementationCall extends ethereum.Call {
  get inputs(): SetSecretNFTContractImplementationCall__Inputs {
    return new SetSecretNFTContractImplementationCall__Inputs(this);
  }

  get outputs(): SetSecretNFTContractImplementationCall__Outputs {
    return new SetSecretNFTContractImplementationCall__Outputs(this);
  }
}

export class SetSecretNFTContractImplementationCall__Inputs {
  _call: SetSecretNFTContractImplementationCall;

  constructor(call: SetSecretNFTContractImplementationCall) {
    this._call = call;
  }

  get _secretNFTContractImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetSecretNFTContractImplementationCall__Outputs {
  _call: SetSecretNFTContractImplementationCall;

  constructor(call: SetSecretNFTContractImplementationCall) {
    this._call = call;
  }
}
